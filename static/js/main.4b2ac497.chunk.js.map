{"version":3,"sources":["api/goods.ts","components/Button/Button.tsx","components/GoodsList/GoodsList.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["getAll","fetch","then","response","ok","Error","status","statusText","json","get5First","goods","sort","previous","current","name","localeCompare","slice","getRed","filter","color","Button","title","props","type","className","GoodsList","map","good","id","style","Loader","App","useState","setGoods","isLoading","setIsLoading","error","setError","currentClickedButton","setCurrentClickedButton","handleFetchData","useCallback","callback","a","onClick","ReactDOM","render","document","getElementById"],"mappings":"qTAKaA,EAAS,kBAAuBC,MAFzC,yEAGDC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,WAGPC,EAAY,WACvB,OAAOT,IACJE,MAAK,SAAAQ,GAAK,OAAI,YAAIA,GAChBC,MAAK,SAACC,EAAUC,GACf,OAAOD,EAASE,KAAKC,cAAcF,EAAQC,SAE5CE,MAAM,EAAG,OAGHC,EAAS,WACpB,OAAOjB,IACJE,MAAK,SAAAQ,GAAK,OAAIA,EAAMQ,QAAO,kBAAyB,QAAzB,EAAGC,a,0CChBtBC,EAA0B,SAAC,GAAD,IACrCC,EADqC,EACrCA,MACGC,EAFkC,wBAIrC,kDACMA,GADN,IAEEC,KAAK,SACLC,UAAU,SAHZ,SAKGH,MCVQI,G,MAA6B,SAAC,GAAD,IAAGf,EAAH,EAAGA,MAAH,OACxC,oBAAIc,UAAU,YAAd,SACGd,EAAMgB,KAAI,SAAAC,GACT,IACEC,EAGED,EAHFC,GACAd,EAEEa,EAFFb,KACAK,EACEQ,EADFR,MAGF,OACE,oBAEE,UAAQ,OACRK,UAAU,kBACVK,MAAO,CAAEV,SAJX,SAMGL,GALIc,UChBFE,G,MAAa,WACxB,OACE,qCACE,sBAAKN,UAAU,SAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,sBAGjB,oBAAIA,UAAU,sBCNPO,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOtB,EAAP,KAAcuB,EAAd,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,oBAAS,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAwDL,mBAAS,IAAjE,mBAAOM,EAAP,KAA6BC,EAA7B,KAEMC,EAAkBC,sBAAW,uCACjC,WAAOC,EAAiCnB,GAAxC,SAAAoB,EAAA,yDACML,IAAyBf,EAD/B,wBAEIY,GAAa,GAFjB,cAKMF,EALN,SAKqBS,IALrB,kCAMMH,EAAwBhB,GACxBc,GAAS,GAPf,kDASMA,GAAS,GATf,yBAWMF,GAAa,GAXnB,6EADiC,wDAe9B,CAACG,IAGN,OACE,sBAAKd,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mCAEA,sBAAKA,UAAU,uBAAf,UACE,cAAC,EAAD,CACE,UAAQ,aACRoB,QAAS,kBAAMJ,EAAgBxC,EAAQ,QACvCqB,MAAM,mBAGR,cAAC,EAAD,CACE,UAAQ,oBACRuB,QAAS,kBAAMJ,EAAgB/B,EAAW,cAC1CY,MAAM,uBAGR,cAAC,EAAD,CACE,UAAQ,aACRuB,QAAS,kBAAMJ,EAAgBvB,EAAQ,QACvCI,MAAM,sBAITa,EACG,cAAC,EAAD,IAEA,qCACGE,GACC,mBAAGZ,UAAU,aAAb,sEAKF,oBAAIA,UAAU,cAEd,cAAC,EAAD,CAAWd,MAAOA,WClE9BmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4b2ac497.chunk.js","sourcesContent":["import { Good } from '../types/Good';\n\nconst API_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json';\n\nexport const getAll = (): Promise<Good[]> => fetch(API_URL)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => [...goods]\n      .sort((previous, current) => {\n        return previous.name.localeCompare(current.name);\n      })\n      .slice(0, 5));\n};\n\nexport const getRed = () => {\n  return getAll()\n    .then(goods => goods.filter(({ color }) => color === 'red'));\n};\n","import { ButtonHTMLAttributes, FC } from 'react';\nimport './Button.scss';\n\ntype Attributes = ButtonHTMLAttributes<HTMLButtonElement>;\n\ninterface ButtonProps extends Attributes {\n  title: string;\n}\n\nexport const Button: FC<ButtonProps> = ({\n  title,\n  ...props\n}) => (\n  <button\n    {...props}\n    type=\"button\"\n    className=\"button\"\n  >\n    {title}\n  </button>\n);\n","import React from 'react';\nimport { Good } from '../../types/Good';\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"goodsList\">\n    {goods.map(good => {\n      const {\n        id,\n        name,\n        color,\n      } = good;\n\n      return (\n        <li\n          key={id}\n          data-cy=\"good\"\n          className=\"goodsList__item\"\n          style={{ color }}\n        >\n          {name}\n        </li>\n      );\n    })}\n  </ul>\n);\n","import { FC } from 'react';\nimport './Loader.scss';\n\nexport const Loader: FC = () => {\n  return (\n    <>\n      <div className=\"loader\">\n        <div className=\"loader__circle\" />\n        <div className=\"loader__circle\" />\n        <div className=\"loader__circle\" />\n        <div className=\"loader__shadow\" />\n        <div className=\"loader__shadow\" />\n        <div className=\"loader__shadow\" />\n      </div>\n\n      <hr className=\"loader__line\" />\n    </>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\n\nimport { getAll, get5First, getRed } from './api/goods';\nimport { Good } from './types/Good';\nimport { Button } from './components/Button';\nimport { GoodsList } from './components/GoodsList';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [currentClickedButton, setCurrentClickedButton] = useState('');\n\n  const handleFetchData = useCallback(\n    async (callback: () => Promise<Good[]>, type: string) => {\n      if (currentClickedButton !== type) {\n        setIsLoading(true);\n\n        try {\n          setGoods(await callback());\n          setCurrentClickedButton(type);\n          setError(false);\n        } catch {\n          setError(true);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    }, [currentClickedButton],\n  );\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Dynamic list of Goods</h1>\n\n      <div className=\"app__buttons-wrapper\">\n        <Button\n          data-cy=\"all-button\"\n          onClick={() => handleFetchData(getAll, 'all')}\n          title=\"Load all goods\"\n        />\n\n        <Button\n          data-cy=\"first-five-button\"\n          onClick={() => handleFetchData(get5First, 'firstFive')}\n          title=\"Load 5 first goods\"\n        />\n\n        <Button\n          data-cy=\"red-button\"\n          onClick={() => handleFetchData(getRed, 'red')}\n          title=\"Load red goods\"\n        />\n      </div>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <>\n            {error && (\n              <p className=\"app__error\">\n                Error: Unable to establish a connection with the server.\n              </p>\n            )}\n\n            <hr className=\"app__line\" />\n\n            <GoodsList goods={goods} />\n          </>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}